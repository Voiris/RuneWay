import "std::buffered" as buffered;
import "std::buffered" get VERSION as buf_v, VERSION;

act main() {
  buffered.println(buffered.VERSION);
  buffered.println(VERSION);
  buffered.print(buf_v);
  buffered.flush();

  let x = 0;
  while x < 10 {
    x += 1;
    if x == 2 or x == 5 {
      continue;
    }
    println(x.to_string());
  }
}

act fib(x) {
    if x <= 1 {
        return x;
    }
    let a = 0;
    let b = 1;
    let i = 2;
    while i <= x {
        let c = a + b;
        a = b;
        b = c;
        i += 1;
    }
    return b;
}

act square(a) {
  return a ** 2;
}

act main1() {
  let x;

  println(x.to_string());

  x = 3;

  println(x.to_string());

  // Hello, world!
  print("Hello,\r1\t1 world!\n\u0207\n");

  x /= 2 + 4;

  println(x.to_string());

  println(f"{x}");

  println(square(5).to_string());

  let is_working = true;
  let is_not_working = !is_working;

  println(is_not_working.to_string());

  let a = 0;
  while a < 3 {
    println(a.to_string());
    a += 1;
    if a == 2 {
      break;
    }
  }

  let l = [1, 3, r"\"];

  println(f"{l}\n  len={l.len()}\n  is_empty={l.is_empty()}");

  for item in l.iter() {
    print(item.to_string());
  }

  println("");

  for i in 1..10 {
    print(i.to_string());
  }

  println("");

  for i in 1..10::2 {
    print(i.to_string());
  }

  println("");

  println(43e-32.to_string());
  println(15e21.to_string());

  /* Goodbye,
     world! */
}
