import "./fib" as fib;
import "std::buffered" as buffered;
import "std::buffered" get VERSION as buf_v, VERSION;
import "std::http" as http;
import "std::json" as json;
// import "std::buffered" get *;

act is_negative(a) {
  println(a);
  act is_positive() {
    return a >= 0;
  }
  return not is_positive();
}

act main() {
  let i = 4;
  let s = cast(i, string);
  println(s, type(s) == string);

  // println(json.dump(json.load(http.get_("https://postman-echo.com/get?foo=bar"))));
  // println(http.post("https://postman-echo.com/post", {"foo": 2}));

  println(cast("string", list));

  if null {} else {
    println("null");
  }

  let a = {"2": "1"};

  println(a);

  a.insert("a", "2");

  println(a.get_("a"));

  println(fib.fib(40));

  let a = (1, 2, 3);
  println(a);
  println(a[2]);

  buffered.print(buffered.VERSION);
  buffered.print("\t\t");
  buffered.println(VERSION);
  buffered.println(buf_v);
  buffered.flush();

  let x;

  for i in [1, 2, 3].iter() {
    x = i;
  }

  println(x);

  let x = 0;
  while x < 10 {
    x += 1;
    if x == 2 or x == 5 {
      continue;
    }
    println(x);
  }
}

act square(a) {
  return a ** 2;
}

act main1() {
  let x;

  println(x);

  x = 3;

  println(x);

  // Hello, world!
  print("Hello,\r1\t1 world!\n\u0207\n");

  x /= 2 + 4;

  println(x);

  println(f"{x}");

  println(square(5));

  let is_working = true;
  let is_not_working = !is_working;

  println(is_not_working);

  let a = 0;
  while a < 3 {
    println(a);
    a += 1;
    if a == 2 {
      break;
    }
  }

  let l = [1, 3, r"\"];

  println(f"{l}\n  len={l.len()}\n  is_empty={l.is_empty()}");

  for item in l.iter() {
    print(item);
  }


  for i in 1..10 {
    print(i);
  }

  println("");

  for i in 1..10::2 {
    print(i);
  }

  println("");

  println(43e-32);
  println(15e21);
}
/* Goodbye,
   world! */
